% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/AllGenerics.R, R/AllMethods.R,
%   R/BaseSets-class.R
\docType{methods}
\name{BaseSets-methods}
\alias{BaseSets-methods}
\alias{relations}
\alias{elements}
\alias{elementIds}
\alias{elementIds<-}
\alias{elementData}
\alias{sets}
\alias{setIds}
\alias{setIds<-}
\alias{setData}
\alias{nElements}
\alias{nSets}
\alias{setLengths}
\alias{elementLengths}
\alias{relations,BaseSets-method}
\alias{elementData,BaseSets-method}
\alias{elements,BaseSets-method}
\alias{elementIds,BaseSets-method}
\alias{elementIds<-,BaseSets-method}
\alias{setData,BaseSets-method}
\alias{sets,BaseSets-method}
\alias{setIds,BaseSets-method}
\alias{setIds<-,BaseSets-method}
\alias{length,BaseSets-method}
\alias{nElements,BaseSets-method}
\alias{nSets,BaseSets-method}
\alias{setLengths,BaseSets-method}
\alias{elementLengths,BaseSets-method}
\alias{subset.BaseSets}
\alias{subset,BaseSets-method}
\alias{as.DataFrame.BaseSets}
\alias{as.DataFrame}
\alias{as.data.frame.BaseSets}
\alias{as.data.frame}
\alias{as.list.BaseSets}
\alias{as.list}
\alias{as.matrix.BaseSets}
\alias{as.matrix}
\alias{as.BaseSets.matrix}
\alias{as.BaseSets}
\alias{as.BaseSets.Go3AnnDbBimap}
\title{Methods for \code{BaseSets} Objects}
\usage{
relations(x)

elements(x)

elementIds(x)

elementIds(x) <- value

elementData(x)

sets(x)

setIds(x)

setIds(x) <- value

setData(x)

nElements(x)

nSets(x)

setLengths(x)

elementLengths(x)

\S4method{relations}{BaseSets}(x)

\S4method{elementData}{BaseSets}(x)

\S4method{elements}{BaseSets}(x)

\S4method{elementIds}{BaseSets}(x)

\S4method{elementIds}{BaseSets}(x) <- value

\S4method{setData}{BaseSets}(x)

\S4method{sets}{BaseSets}(x)

\S4method{setIds}{BaseSets}(x)

\S4method{setIds}{BaseSets}(x) <- value

\S4method{length}{BaseSets}(x)

\S4method{nElements}{BaseSets}(x)

\S4method{nSets}{BaseSets}(x)

\S4method{setLengths}{BaseSets}(x)

\S4method{elementLengths}{BaseSets}(x)

\method{subset}{BaseSets}(x, ...)

as.DataFrame.BaseSets(x, ...)

\method{as.data.frame}{BaseSets}(x, ...)

\method{as.list}{BaseSets}(x, ...)

\method{as.matrix}{BaseSets}(x, ...)

as.BaseSets.matrix(matrix, ...)

as.BaseSets.Go3AnnDbBimap(Go3AnnDbBimap, ...)
}
\arguments{
\item{x}{An object of class inheriting from \code{\link[=BaseSets-class]{BaseSets}}.}

\item{value}{An object of a class specified in the S4 method signature or as outlined in 'Accessors'.}

\item{...}{Additional arguments passed to and from other methods.}

\item{matrix}{A \code{matrix}.
The matrix will be coerced to \code{logical} type and relations indicating \code{TRUE} will be stored in the \code{BaseSets}.}

\item{Go3AnnDbBimap}{A \code{\link{Go3AnnDbBimap}}.}
}
\description{
This page documents the S4 generics and methods defined for objects inheriting of the \code{\link[=BaseSets-class]{BaseSets}} class.
In the usage below, \code{x} represents an object of class inheriting from \code{\link[=BaseSets-class]{BaseSets}},
and \code{value} is an object of a class specified in the S4 method signature or as outlined in 'Accessors'.
}
\section{Accessors}{

\code{relations(x)} returns a \code{DataFrame} of relations including \code{"element"}, \code{"set"}, and any relation-wise metadata available.


\code{elementData(x)} returns the metadata associated with each element as an object inheriting from \code{\link[=IdVector-class]{IdVector}}.


\code{elements(x)} returns an \code{IdVector} of sets and associated metadata as ordered in \code{relations(x)$element}.


\code{elementIds(x)} and \code{elementIds(x) <- value} get and set the \code{character} vector of element identifiers.


\code{setData(x)} returns the metadata associated with each set as an object inheriting from \code{\link[=IdVector-class]{IdVector}}.


\code{sets(x)} returns an \code{IdVector} of sets and associated metadata as ordered in \code{relations(x)$set}.


\code{setIds(x)} and \code{setIds(x) <- value} get and set the \code{character} vector of element identifiers.
}

\section{Dimensions}{

\code{length(x)} returns the total count of relations.


\code{nElements(x)} returns the count of unique elements.


\code{nSets(x)} returns the count of unique sets.


\code{setLengths(x)} returns the count of relations per set.


\code{elementLengths(x)} returns the count of relations per element.
}

\section{Subsetting}{

\code{subset(x, subset, ...)} returns subsets of relations which meet conditions.
For \code{FuzzySets} objects, the \code{subset} argument should be a logical expression referring to any of \code{"element"}, \code{"set"}, and any available relation metadata indicating elements or rows to keep: missing values are taken as false.
In addition, metadata for elements and sets that are not represented in the remaining relations are also dropped.
}

\section{Coercion}{

\code{as(x, "DataFrame")} and \code{as.DataFrame(x)} return a \code{DataFrame} including \code{"element"}, \code{"set"}, and any relation-wise metadata available.


\code{as(x, "data.frame")} and \code{as.data.frame(x)}  return a \code{data.frame} including \code{"element"}, \code{"set"}, and any relation-wise metadata available.


\code{as(x, "list")} and \code{as.list(x)} return a \code{data.frame} including \code{"element"}, \code{"set"}, and any relation-wise metadata available.


\code{as(x, "matrix")} and \code{as.matrix(x)} return a \code{matrix} with elements as rows, sets as columns, and a \code{logical} value to indicate membership.
}

\seealso{
\code{\linkS4class{BaseSets}}.
}
