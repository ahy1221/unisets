% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/AllClasses.R
\docType{class}
\name{BaseSets-class}
\alias{BaseSets-class}
\alias{BaseSets}
\title{BaseSets Class}
\usage{
BaseSets(relations = DataFrame(element = character(0), set =
  character(0)), elementData, setData)
}
\arguments{
\item{relations}{DataFrame. Two columns provide mapping relationships between \code{"element"} and \code{"set"}.}

\item{elementData}{DataFrame. Provide metadata for each unique element in \code{relations$element}.}

\item{setData}{DataFrame. Provide metadata for each unique element in \code{relations$set}.}
}
\value{
A \code{BaseSets} object.
}
\description{
The \code{BaseSets} class implements a container to describe distinct objects that make up sets, along with element metadata and set metadata.
}
\section{Slots}{

\describe{
\item{\code{relations}}{DataFrame. Two columns provide mapping relationships between \code{"element"} and \code{"set"}.}

\item{\code{elementData}}{DataFrame. Provide metadata for each unique element in \code{relations$element}.}

\item{\code{setData}}{DataFrame. Provide metadata for each unique element in \code{relations$set}.}
}}

\examples{
# Constructor ----

# Visually intuitive definition of sets
sets <- list(
  set1=c("A", "B"),
  set2=c("B", "C", "D"),
  set3=c("E"))

# Reformat as a table
relations <- DataFrame(
  element=unlist(sets),
  set=rep(names(sets), lengths(sets))
)

bs <- BaseSets(relations)

# Subsetting ----

bs1 <- subset(bs, set == "set1" | element == "E")

# Coercing ----

# to list (gene sets)
ls1 <- as(bs, "list")
# to matrix (logical membership)
m1 <- as(bs, "matrix")

# Read-only getters ----

relations(bs)
elementData(bs)
setData(bs)

length(bs)
nElements(bs)
nSets(bs)
elementIds(bs)
setIds(bs)

setLengths(bs)
elementLengths(bs)

# Getters/Setters ----

bs1 <- bs
elementIds(bs1) <- paste0("gene", seq_len(nElements(bs)))
setIds(bs1) <- paste0("geneset", seq_len(nSets(bs)))

}
\seealso{
BaseSets-methods
}
