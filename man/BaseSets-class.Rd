% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/AllClasses.R
\docType{class}
\name{BaseSets-class}
\alias{BaseSets-class}
\alias{BaseSets}
\title{BaseSets Class}
\usage{
BaseSets(relations = DataFrame(element = character(0), set =
  character(0)), elementData, setData)
}
\arguments{
\item{relations}{\code{\linkS4class{DataFrame}}.
At least two columns that provide mapping relationships between \code{"element"} and \code{"set"}.
Additional columns are taken as relation metadata.}

\item{elementData}{\code{\link{IdVector}}.
Metadata for each unique element in \code{relations$element} is provided as \code{mcols(elementData)}.}

\item{setData}{\code{\link{IdVector}}.
Metadata for each unique set in \code{relations$set} is provided as \code{mcols(setData)}.}
}
\value{
A \code{BaseSets} object.
}
\description{
The \code{BaseSets} class implements a container to describe distinct objects that make up sets, along with element metadata and set metadata.
}
\section{Slots}{

\describe{
\item{\code{relations}}{\code{\linkS4class{Hits}}
The \emph{left node} and \emph{right node} of each hit stores the index of the \code{element} and \code{set} in \code{elementData} and \code{setData}, respectively.
Metadata for each relation is stored as \code{mcols(object@relations)}.}

\item{\code{elementData}}{\code{\link{IdVector}}.
Metadata for each unique element in \code{relations$element} is stored as \code{mcols(elementData)}.}

\item{\code{setData}}{\code{\link{IdVector}}.
Metadata for each unique set in \code{relations$set} is stored as \code{mcols(setData)}.}
}}

\examples{
# Constructor ----

# Visually intuitive definition of sets
sets <- list(
  set1=c("A", "B"),
  set2=c("B", "C", "D"),
  set3=c("E"))

bs <- as(sets, "BaseSets")

# Coercing ----

# to list (gene sets)
ls1 <- as(bs, "list")
# to matrix (logical membership)
m1 <- as(bs, "matrix")

# Accessors ----

relations(bs)
elementData(bs)
setData(bs)

# Dimensions ----

length(bs)
nElements(bs)
nSets(bs)
elementIds(bs)
setIds(bs)

setLengths(bs)
elementLengths(bs)

# Getters/Setters ----

bs1 <- bs
elementIds(bs1) <- paste0("gene", seq_len(nElements(bs)))
setIds(bs1) <- paste0("geneset", seq_len(nSets(bs)))
bs1
}
\seealso{
BaseSets-methods
}
