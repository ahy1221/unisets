% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/AllClasses.R, R/AllGenerics.R,
%   R/BaseSets-class.R
\docType{class}
\name{BaseSets-class}
\alias{BaseSets-class}
\alias{BaseSets}
\alias{relations}
\alias{elements}
\alias{elementIds}
\alias{elementIds<-}
\alias{elementData}
\alias{sets}
\alias{setIds}
\alias{setIds<-}
\alias{setData}
\alias{nElements}
\alias{nSets}
\alias{setLengths}
\alias{elementLengths}
\alias{relations,BaseSets-method}
\alias{elementData,BaseSets-method}
\alias{elements,BaseSets-method}
\alias{elementIds,BaseSets-method}
\alias{elementIds<-,BaseSets-method}
\alias{setData,BaseSets-method}
\alias{sets,BaseSets-method}
\alias{setIds,BaseSets-method}
\alias{setIds<-,BaseSets-method}
\alias{length,BaseSets-method}
\alias{nElements,BaseSets-method}
\alias{nSets,BaseSets-method}
\alias{setLengths,BaseSets-method}
\alias{elementLengths,BaseSets-method}
\alias{as.list.BaseSets}
\alias{as.list}
\alias{as.matrix.BaseSets}
\alias{as.matrix}
\title{BaseSets Class}
\usage{
BaseSets(relations = DataFrame(element = character(0), set =
  character(0)), elementData, setData)

relations(x)

elements(x)

elementIds(x)

elementIds(x) <- value

elementData(x)

sets(x)

setIds(x)

setIds(x) <- value

setData(x)

nElements(x)

nSets(x)

setLengths(x)

elementLengths(x)

\S4method{relations}{BaseSets}(x)

\S4method{elementData}{BaseSets}(x)

\S4method{elements}{BaseSets}(x)

\S4method{elementIds}{BaseSets}(x)

\S4method{elementIds}{BaseSets}(x) <- value

\S4method{setData}{BaseSets}(x)

\S4method{sets}{BaseSets}(x)

\S4method{setIds}{BaseSets}(x)

\S4method{setIds}{BaseSets}(x) <- value

\S4method{length}{BaseSets}(x)

\S4method{nElements}{BaseSets}(x)

\S4method{nSets}{BaseSets}(x)

\S4method{setLengths}{BaseSets}(x)

\S4method{elementLengths}{BaseSets}(x)

\method{as.list}{BaseSets}(x, ...)

\method{as.matrix}{BaseSets}(x, ...)
}
\arguments{
\item{relations}{DataFrame. Two columns provide mapping relationships between \code{"element"} and \code{"set"}.}

\item{elementData}{DataFrame. Provide metadata for each unique element in \code{relations$element}.}

\item{setData}{DataFrame. Provide metadata for each unique element in \code{relations$set}.}

\item{x}{An object that inherits from \code{BaseSets}.}

\item{value}{An object of a class specified in the S4 method signature or as outlined in 'Slots'.}

\item{...}{Additional arguments passed to and from methods.}
}
\value{
A \code{BaseSets} object.
}
\description{
The \code{BaseSets} class implements a container to describe distinct objects that make up sets, along with element metadata and set metadata.
}
\section{Slots}{

\describe{
\item{\code{relations}}{DataFrame. Two columns provide mapping relationships between \code{"element"} and \code{"set"}.}

\item{\code{elementData}}{DataFrame. Provide metadata for each unique element in \code{relations$element}.}

\item{\code{setData}}{DataFrame. Provide metadata for each unique element in \code{relations$set}.}
}}

\examples{
# Constructor ----

# Visually intuitive definition of sets
sets <- list(
  set1=c("A", "B"),
  set2=c("B", "C", "D"),
  set3=c("E"))

# Reformat as a table
relations <- DataFrame(
  element=unlist(sets),
  set=rep(names(sets), lengths(sets))
)

bs <- BaseSets(relations)

# Subsetting ----

bs1 <- subset(bs, set == "set1" | element == "E")

# Coercing ----

# to list (gene sets)
ls1 <- as(bs, "list")
# to matrix (logical membership)
m1 <- as(bs, "matrix")

# Read-only getters ----

relations(bs)
elementData(bs)
setData(bs)

length(bs)
nElements(bs)
nSets(bs)
elementIds(bs)
setIds(bs)

setLengths(bs)
elementLengths(bs)

# Getters/Setters ----

bs1 <- bs
elementIds(bs1) <- paste0("gene", seq_len(nElements(bs)))
setIds(bs1) <- paste0("geneset", seq_len(nSets(bs)))

}
